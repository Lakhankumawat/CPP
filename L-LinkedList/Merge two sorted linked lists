/* C++ program to merge two sorted linked lists */
// { Driver Code Starts
#include<iostream>
using namespace std;

/* Link list Node */
struct Node
{
    int data;
    struct Node *next;
    
    Node(int x)
    {
        data = x;
        next = NULL;
    }
};

Node* sortedMerge(struct Node* a, struct Node* b);

/* Function to print Nodes in a given linked list */
void printList(struct Node *n)
{
    while (n!=NULL)
    {
        cout << n->data << " ";
        n = n->next;
    }
    cout << endl;
}

/* Driver program to test above function*/
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,m;
        cin>>n>>m;

        int data;
        cin>>data;
        struct Node *head1 = new Node(data);
        struct Node *tail1 = head1;
        for (int i = 1; i < n; ++i)
        {
            cin>>data;
            tail1->next = new Node(data);
            tail1 = tail1->next;
        }

        cin>>data;
        struct Node *head2 = new Node(data);
        struct Node *tail2 = head2;
        for(int i=1; i<m; i++)
        {
            cin>>data;
            tail2->next = new Node(data);
            tail2 = tail2->next;
        }

        Node *head = sortedMerge(head1, head2);
        printList(head);
    }
    return 0;
}
// } Driver Code Ends


 

/* Link list Node
struct Node {
  int data;
  struct Node *next;
  
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/
//Function to merge two sorted linked list.
Node* sortedMerge(Node* head1, Node* head2)  
{  
    // code here
  
    Node* result = NULL; 
      
    /* Base cases */
    if (head1 == NULL) 
        return(head2); 
    else if (head2 == NULL) 
        return(head1); 
      
    /* Pick either a or b, and recur */
    if (head1->data <= head2->data) 
    { 
        result = head1; 
        result->next = sortedMerge(head1->next, head2); 
    } 
    else
    { 
        result = head2; 
        result->next = sortedMerge(head1, head2->next); 
    } 
    return(result); 

} 


//Test Case #1
//Input: 
//4 4
//10 15 17 20 
//5 9 13 19 
//Output: 
//5 9 10 13 15 17 19 20

//Test Case #2
//Input: 
//4 3
//5 10 15 40 
//2 3 20
//Output:
//2 3 5 10 15 20 40

//Test Case #3
//Input: 
//2 2
//1 1
//2 4
//Output:
//1 1 2 4



